/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type { FunctionFragment, Result } from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../common";

export type CrossChainOrderStruct = {
  settlementContract: PromiseOrValue<string>;
  swapper: PromiseOrValue<string>;
  nonce: PromiseOrValue<BigNumberish>;
  originChainId: PromiseOrValue<BigNumberish>;
  initiateDeadline: PromiseOrValue<BigNumberish>;
  fillDeadline: PromiseOrValue<BigNumberish>;
  orderData: PromiseOrValue<BytesLike>;
};

export type CrossChainOrderStructOutput = [
  string,
  string,
  BigNumber,
  number,
  number,
  number,
  string
] & {
  settlementContract: string;
  swapper: string;
  nonce: BigNumber;
  originChainId: number;
  initiateDeadline: number;
  fillDeadline: number;
  orderData: string;
};

export type PostRequestStruct = {
  source: PromiseOrValue<BytesLike>;
  dest: PromiseOrValue<BytesLike>;
  nonce: PromiseOrValue<BigNumberish>;
  from: PromiseOrValue<BytesLike>;
  to: PromiseOrValue<BytesLike>;
  timeoutTimestamp: PromiseOrValue<BigNumberish>;
  body: PromiseOrValue<BytesLike>;
};

export type PostRequestStructOutput = [
  string,
  string,
  BigNumber,
  string,
  string,
  BigNumber,
  string
] & {
  source: string;
  dest: string;
  nonce: BigNumber;
  from: string;
  to: string;
  timeoutTimestamp: BigNumber;
  body: string;
};

export type IncomingPostRequestStruct = {
  request: PostRequestStruct;
  relayer: PromiseOrValue<string>;
};

export type IncomingPostRequestStructOutput = [
  PostRequestStructOutput,
  string
] & { request: PostRequestStructOutput; relayer: string };

export type GetRequestStruct = {
  source: PromiseOrValue<BytesLike>;
  dest: PromiseOrValue<BytesLike>;
  nonce: PromiseOrValue<BigNumberish>;
  from: PromiseOrValue<string>;
  timeoutTimestamp: PromiseOrValue<BigNumberish>;
  keys: PromiseOrValue<BytesLike>[];
  height: PromiseOrValue<BigNumberish>;
};

export type GetRequestStructOutput = [
  string,
  string,
  BigNumber,
  string,
  BigNumber,
  string[],
  BigNumber
] & {
  source: string;
  dest: string;
  nonce: BigNumber;
  from: string;
  timeoutTimestamp: BigNumber;
  keys: string[];
  height: BigNumber;
};

export type StorageValueStruct = {
  key: PromiseOrValue<BytesLike>;
  value: PromiseOrValue<BytesLike>;
};

export type StorageValueStructOutput = [string, string] & {
  key: string;
  value: string;
};

export type GetResponseStruct = {
  request: GetRequestStruct;
  values: StorageValueStruct[];
};

export type GetResponseStructOutput = [
  GetRequestStructOutput,
  StorageValueStructOutput[]
] & { request: GetRequestStructOutput; values: StorageValueStructOutput[] };

export type IncomingGetResponseStruct = {
  response: GetResponseStruct;
  relayer: PromiseOrValue<string>;
};

export type IncomingGetResponseStructOutput = [
  GetResponseStructOutput,
  string
] & { response: GetResponseStructOutput; relayer: string };

export type PostResponseStruct = {
  request: PostRequestStruct;
  response: PromiseOrValue<BytesLike>;
  timeoutTimestamp: PromiseOrValue<BigNumberish>;
};

export type PostResponseStructOutput = [
  PostRequestStructOutput,
  string,
  BigNumber
] & {
  request: PostRequestStructOutput;
  response: string;
  timeoutTimestamp: BigNumber;
};

export type IncomingPostResponseStruct = {
  response: PostResponseStruct;
  relayer: PromiseOrValue<string>;
};

export type IncomingPostResponseStructOutput = [
  PostResponseStructOutput,
  string
] & { response: PostResponseStructOutput; relayer: string };

export type InputStruct = {
  token: PromiseOrValue<string>;
  amount: PromiseOrValue<BigNumberish>;
};

export type InputStructOutput = [string, BigNumber] & {
  token: string;
  amount: BigNumber;
};

export type OutputStruct = {
  token: PromiseOrValue<string>;
  amount: PromiseOrValue<BigNumberish>;
  recipient: PromiseOrValue<string>;
  chainId: PromiseOrValue<BigNumberish>;
};

export type OutputStructOutput = [string, BigNumber, string, number] & {
  token: string;
  amount: BigNumber;
  recipient: string;
  chainId: number;
};

export type ResolvedCrossChainOrderStruct = {
  settlementContract: PromiseOrValue<string>;
  swapper: PromiseOrValue<string>;
  nonce: PromiseOrValue<BigNumberish>;
  originChainId: PromiseOrValue<BigNumberish>;
  initiateDeadline: PromiseOrValue<BigNumberish>;
  fillDeadline: PromiseOrValue<BigNumberish>;
  swapperInputs: InputStruct[];
  swapperOutputs: OutputStruct[];
  fillerOutputs: OutputStruct[];
};

export type ResolvedCrossChainOrderStructOutput = [
  string,
  string,
  BigNumber,
  number,
  number,
  number,
  InputStructOutput[],
  OutputStructOutput[],
  OutputStructOutput[]
] & {
  settlementContract: string;
  swapper: string;
  nonce: BigNumber;
  originChainId: number;
  initiateDeadline: number;
  fillDeadline: number;
  swapperInputs: InputStructOutput[];
  swapperOutputs: OutputStructOutput[];
  fillerOutputs: OutputStructOutput[];
};

export interface HypertentsAbiInterface extends utils.Interface {
  functions: {
    "_filled(bytes32)": FunctionFragment;
    "_pending(bytes32)": FunctionFragment;
    "_refunds(bytes32)": FunctionFragment;
    "fill((address,address,uint256,uint32,uint32,uint32,bytes),bytes)": FunctionFragment;
    "initiate((address,address,uint256,uint32,uint32,uint32,bytes),bytes,bytes)": FunctionFragment;
    "onAccept(((bytes,bytes,uint64,bytes,bytes,uint64,bytes),address))": FunctionFragment;
    "onGetResponse((((bytes,bytes,uint64,address,uint64,bytes[],uint64),(bytes,bytes)[]),address))": FunctionFragment;
    "onGetTimeout((bytes,bytes,uint64,address,uint64,bytes[],uint64))": FunctionFragment;
    "onPostRequestTimeout((bytes,bytes,uint64,bytes,bytes,uint64,bytes))": FunctionFragment;
    "onPostResponse((((bytes,bytes,uint64,bytes,bytes,uint64,bytes),bytes,uint64),address))": FunctionFragment;
    "onPostResponseTimeout(((bytes,bytes,uint64,bytes,bytes,uint64,bytes),bytes,uint64))": FunctionFragment;
    "refund((address,address,uint256,uint32,uint32,uint32,bytes),uint64)": FunctionFragment;
    "resolve((address,address,uint256,uint32,uint32,uint32,bytes),bytes)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "_filled"
      | "_pending"
      | "_refunds"
      | "fill"
      | "initiate"
      | "onAccept"
      | "onGetResponse"
      | "onGetTimeout"
      | "onPostRequestTimeout"
      | "onPostResponse"
      | "onPostResponseTimeout"
      | "refund"
      | "resolve"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "_filled",
    values: [PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "_pending",
    values: [PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "_refunds",
    values: [PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "fill",
    values: [CrossChainOrderStruct, PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "initiate",
    values: [
      CrossChainOrderStruct,
      PromiseOrValue<BytesLike>,
      PromiseOrValue<BytesLike>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "onAccept",
    values: [IncomingPostRequestStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "onGetResponse",
    values: [IncomingGetResponseStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "onGetTimeout",
    values: [GetRequestStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "onPostRequestTimeout",
    values: [PostRequestStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "onPostResponse",
    values: [IncomingPostResponseStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "onPostResponseTimeout",
    values: [PostResponseStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "refund",
    values: [CrossChainOrderStruct, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "resolve",
    values: [CrossChainOrderStruct, PromiseOrValue<BytesLike>]
  ): string;

  decodeFunctionResult(functionFragment: "_filled", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "_pending", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "_refunds", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "fill", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "initiate", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "onAccept", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "onGetResponse",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "onGetTimeout",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "onPostRequestTimeout",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "onPostResponse",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "onPostResponseTimeout",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "refund", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "resolve", data: BytesLike): Result;

  events: {};
}

export interface HypertentsAbi extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: HypertentsAbiInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    _filled(
      arg0: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<[string]>;

    _pending(
      arg0: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<[string]>;

    _refunds(
      arg0: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<
      [string, string, BigNumber, number, number, number, string] & {
        settlementContract: string;
        swapper: string;
        nonce: BigNumber;
        originChainId: number;
        initiateDeadline: number;
        fillDeadline: number;
        orderData: string;
      }
    >;

    fill(
      order: CrossChainOrderStruct,
      fillerData: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    initiate(
      order: CrossChainOrderStruct,
      signature: PromiseOrValue<BytesLike>,
      fillerData: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    onAccept(
      incoming: IncomingPostRequestStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    onGetResponse(
      incoming: IncomingGetResponseStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    onGetTimeout(
      arg0: GetRequestStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    onPostRequestTimeout(
      arg0: PostRequestStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    onPostResponse(
      arg0: IncomingPostResponseStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    onPostResponseTimeout(
      arg0: PostResponseStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    refund(
      order: CrossChainOrderStruct,
      expiredHeight: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    resolve(
      order: CrossChainOrderStruct,
      fillerData: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<[ResolvedCrossChainOrderStructOutput]>;
  };

  _filled(
    arg0: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<string>;

  _pending(
    arg0: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<string>;

  _refunds(
    arg0: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<
    [string, string, BigNumber, number, number, number, string] & {
      settlementContract: string;
      swapper: string;
      nonce: BigNumber;
      originChainId: number;
      initiateDeadline: number;
      fillDeadline: number;
      orderData: string;
    }
  >;

  fill(
    order: CrossChainOrderStruct,
    fillerData: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  initiate(
    order: CrossChainOrderStruct,
    signature: PromiseOrValue<BytesLike>,
    fillerData: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  onAccept(
    incoming: IncomingPostRequestStruct,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  onGetResponse(
    incoming: IncomingGetResponseStruct,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  onGetTimeout(
    arg0: GetRequestStruct,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  onPostRequestTimeout(
    arg0: PostRequestStruct,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  onPostResponse(
    arg0: IncomingPostResponseStruct,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  onPostResponseTimeout(
    arg0: PostResponseStruct,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  refund(
    order: CrossChainOrderStruct,
    expiredHeight: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  resolve(
    order: CrossChainOrderStruct,
    fillerData: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<ResolvedCrossChainOrderStructOutput>;

  callStatic: {
    _filled(
      arg0: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<string>;

    _pending(
      arg0: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<string>;

    _refunds(
      arg0: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<
      [string, string, BigNumber, number, number, number, string] & {
        settlementContract: string;
        swapper: string;
        nonce: BigNumber;
        originChainId: number;
        initiateDeadline: number;
        fillDeadline: number;
        orderData: string;
      }
    >;

    fill(
      order: CrossChainOrderStruct,
      fillerData: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<void>;

    initiate(
      order: CrossChainOrderStruct,
      signature: PromiseOrValue<BytesLike>,
      fillerData: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<void>;

    onAccept(
      incoming: IncomingPostRequestStruct,
      overrides?: CallOverrides
    ): Promise<void>;

    onGetResponse(
      incoming: IncomingGetResponseStruct,
      overrides?: CallOverrides
    ): Promise<void>;

    onGetTimeout(
      arg0: GetRequestStruct,
      overrides?: CallOverrides
    ): Promise<void>;

    onPostRequestTimeout(
      arg0: PostRequestStruct,
      overrides?: CallOverrides
    ): Promise<void>;

    onPostResponse(
      arg0: IncomingPostResponseStruct,
      overrides?: CallOverrides
    ): Promise<void>;

    onPostResponseTimeout(
      arg0: PostResponseStruct,
      overrides?: CallOverrides
    ): Promise<void>;

    refund(
      order: CrossChainOrderStruct,
      expiredHeight: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    resolve(
      order: CrossChainOrderStruct,
      fillerData: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<ResolvedCrossChainOrderStructOutput>;
  };

  filters: {};

  estimateGas: {
    _filled(
      arg0: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    _pending(
      arg0: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    _refunds(
      arg0: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    fill(
      order: CrossChainOrderStruct,
      fillerData: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    initiate(
      order: CrossChainOrderStruct,
      signature: PromiseOrValue<BytesLike>,
      fillerData: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    onAccept(
      incoming: IncomingPostRequestStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    onGetResponse(
      incoming: IncomingGetResponseStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    onGetTimeout(
      arg0: GetRequestStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    onPostRequestTimeout(
      arg0: PostRequestStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    onPostResponse(
      arg0: IncomingPostResponseStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    onPostResponseTimeout(
      arg0: PostResponseStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    refund(
      order: CrossChainOrderStruct,
      expiredHeight: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    resolve(
      order: CrossChainOrderStruct,
      fillerData: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    _filled(
      arg0: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    _pending(
      arg0: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    _refunds(
      arg0: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    fill(
      order: CrossChainOrderStruct,
      fillerData: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    initiate(
      order: CrossChainOrderStruct,
      signature: PromiseOrValue<BytesLike>,
      fillerData: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    onAccept(
      incoming: IncomingPostRequestStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    onGetResponse(
      incoming: IncomingGetResponseStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    onGetTimeout(
      arg0: GetRequestStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    onPostRequestTimeout(
      arg0: PostRequestStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    onPostResponse(
      arg0: IncomingPostResponseStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    onPostResponseTimeout(
      arg0: PostResponseStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    refund(
      order: CrossChainOrderStruct,
      expiredHeight: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    resolve(
      order: CrossChainOrderStruct,
      fillerData: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
