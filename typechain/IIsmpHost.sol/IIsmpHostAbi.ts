/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type { FunctionFragment, Result } from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../common";

export type StateMachineHeightStruct = {
  stateMachineId: PromiseOrValue<BigNumberish>;
  height: PromiseOrValue<BigNumberish>;
};

export type StateMachineHeightStructOutput = [BigNumber, BigNumber] & {
  stateMachineId: BigNumber;
  height: BigNumber;
};

export type PostRequestStruct = {
  source: PromiseOrValue<BytesLike>;
  dest: PromiseOrValue<BytesLike>;
  nonce: PromiseOrValue<BigNumberish>;
  from: PromiseOrValue<BytesLike>;
  to: PromiseOrValue<BytesLike>;
  timeoutTimestamp: PromiseOrValue<BigNumberish>;
  body: PromiseOrValue<BytesLike>;
};

export type PostRequestStructOutput = [
  string,
  string,
  BigNumber,
  string,
  string,
  BigNumber,
  string
] & {
  source: string;
  dest: string;
  nonce: BigNumber;
  from: string;
  to: string;
  timeoutTimestamp: BigNumber;
  body: string;
};

export type DispatchPostResponseStruct = {
  request: PostRequestStruct;
  response: PromiseOrValue<BytesLike>;
  timeout: PromiseOrValue<BigNumberish>;
  fee: PromiseOrValue<BigNumberish>;
  payer: PromiseOrValue<string>;
};

export type DispatchPostResponseStructOutput = [
  PostRequestStructOutput,
  string,
  BigNumber,
  BigNumber,
  string
] & {
  request: PostRequestStructOutput;
  response: string;
  timeout: BigNumber;
  fee: BigNumber;
  payer: string;
};

export type DispatchPostStruct = {
  dest: PromiseOrValue<BytesLike>;
  to: PromiseOrValue<BytesLike>;
  body: PromiseOrValue<BytesLike>;
  timeout: PromiseOrValue<BigNumberish>;
  fee: PromiseOrValue<BigNumberish>;
  payer: PromiseOrValue<string>;
};

export type DispatchPostStructOutput = [
  string,
  string,
  string,
  BigNumber,
  BigNumber,
  string
] & {
  dest: string;
  to: string;
  body: string;
  timeout: BigNumber;
  fee: BigNumber;
  payer: string;
};

export type DispatchGetStruct = {
  dest: PromiseOrValue<BytesLike>;
  height: PromiseOrValue<BigNumberish>;
  keys: PromiseOrValue<BytesLike>[];
  timeout: PromiseOrValue<BigNumberish>;
  fee: PromiseOrValue<BigNumberish>;
};

export type DispatchGetStructOutput = [
  string,
  BigNumber,
  string[],
  BigNumber,
  BigNumber
] & {
  dest: string;
  height: BigNumber;
  keys: string[];
  timeout: BigNumber;
  fee: BigNumber;
};

export type PostResponseStruct = {
  request: PostRequestStruct;
  response: PromiseOrValue<BytesLike>;
  timeoutTimestamp: PromiseOrValue<BigNumberish>;
};

export type PostResponseStructOutput = [
  PostRequestStructOutput,
  string,
  BigNumber
] & {
  request: PostRequestStructOutput;
  response: string;
  timeoutTimestamp: BigNumber;
};

export type GetRequestStruct = {
  source: PromiseOrValue<BytesLike>;
  dest: PromiseOrValue<BytesLike>;
  nonce: PromiseOrValue<BigNumberish>;
  from: PromiseOrValue<string>;
  timeoutTimestamp: PromiseOrValue<BigNumberish>;
  keys: PromiseOrValue<BytesLike>[];
  height: PromiseOrValue<BigNumberish>;
};

export type GetRequestStructOutput = [
  string,
  string,
  BigNumber,
  string,
  BigNumber,
  string[],
  BigNumber
] & {
  source: string;
  dest: string;
  nonce: BigNumber;
  from: string;
  timeoutTimestamp: BigNumber;
  keys: string[];
  height: BigNumber;
};

export type StorageValueStruct = {
  key: PromiseOrValue<BytesLike>;
  value: PromiseOrValue<BytesLike>;
};

export type StorageValueStructOutput = [string, string] & {
  key: string;
  value: string;
};

export type GetResponseStruct = {
  request: GetRequestStruct;
  values: StorageValueStruct[];
};

export type GetResponseStructOutput = [
  GetRequestStructOutput,
  StorageValueStructOutput[]
] & { request: GetRequestStructOutput; values: StorageValueStructOutput[] };

export type FeeMetadataStruct = {
  fee: PromiseOrValue<BigNumberish>;
  sender: PromiseOrValue<string>;
};

export type FeeMetadataStructOutput = [BigNumber, string] & {
  fee: BigNumber;
  sender: string;
};

export type ResponseReceiptStruct = {
  responseCommitment: PromiseOrValue<BytesLike>;
  relayer: PromiseOrValue<string>;
};

export type ResponseReceiptStructOutput = [string, string] & {
  responseCommitment: string;
  relayer: string;
};

export type StateCommitmentStruct = {
  timestamp: PromiseOrValue<BigNumberish>;
  overlayRoot: PromiseOrValue<BytesLike>;
  stateRoot: PromiseOrValue<BytesLike>;
};

export type StateCommitmentStructOutput = [BigNumber, string, string] & {
  timestamp: BigNumber;
  overlayRoot: string;
  stateRoot: string;
};

export interface IIsmpHostAbiInterface extends utils.Interface {
  functions: {
    "admin()": FunctionFragment;
    "challengePeriod()": FunctionFragment;
    "consensusClient()": FunctionFragment;
    "consensusState()": FunctionFragment;
    "consensusUpdateTime()": FunctionFragment;
    "deleteStateMachineCommitment((uint256,uint256),address)": FunctionFragment;
    "dispatch(((bytes,bytes,uint64,bytes,bytes,uint64,bytes),bytes,uint64,uint256,address))": FunctionFragment;
    "dispatch((bytes,bytes,bytes,uint64,uint256,address))": FunctionFragment;
    "dispatch((bytes,uint64,bytes[],uint64,uint256))": FunctionFragment;
    "dispatchIncoming(((bytes,bytes,uint64,bytes,bytes,uint64,bytes),bytes,uint64),address)": FunctionFragment;
    "dispatchIncoming((bytes,bytes,uint64,bytes,bytes,uint64,bytes),address)": FunctionFragment;
    "dispatchIncoming(((bytes,bytes,uint64,address,uint64,bytes[],uint64),(bytes,bytes)[]),address)": FunctionFragment;
    "dispatchTimeOut((bytes,bytes,uint64,address,uint64,bytes[],uint64),(uint256,address),bytes32)": FunctionFragment;
    "dispatchTimeOut(((bytes,bytes,uint64,bytes,bytes,uint64,bytes),bytes,uint64),(uint256,address),bytes32)": FunctionFragment;
    "dispatchTimeOut((bytes,bytes,uint64,bytes,bytes,uint64,bytes),(uint256,address),bytes32)": FunctionFragment;
    "feeToken()": FunctionFragment;
    "frozen()": FunctionFragment;
    "fundRequest(bytes32,uint256)": FunctionFragment;
    "fundResponse(bytes32,uint256)": FunctionFragment;
    "host()": FunctionFragment;
    "hyperbridge()": FunctionFragment;
    "latestStateMachineHeight(uint256)": FunctionFragment;
    "nonce()": FunctionFragment;
    "perByteFee()": FunctionFragment;
    "requestCommitments(bytes32)": FunctionFragment;
    "requestReceipts(bytes32)": FunctionFragment;
    "responded(bytes32)": FunctionFragment;
    "responseCommitments(bytes32)": FunctionFragment;
    "responseReceipts(bytes32)": FunctionFragment;
    "setFrozenState(uint8)": FunctionFragment;
    "stateCommitmentFee()": FunctionFragment;
    "stateMachineCommitment((uint256,uint256))": FunctionFragment;
    "stateMachineCommitmentUpdateTime((uint256,uint256))": FunctionFragment;
    "storeConsensusState(bytes)": FunctionFragment;
    "storeStateMachineCommitment((uint256,uint256),(uint256,bytes32,bytes32))": FunctionFragment;
    "timestamp()": FunctionFragment;
    "unStakingPeriod()": FunctionFragment;
    "uniswapV2Router()": FunctionFragment;
    "vetoes(uint256,uint256)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "admin"
      | "challengePeriod"
      | "consensusClient"
      | "consensusState"
      | "consensusUpdateTime"
      | "deleteStateMachineCommitment"
      | "dispatch(((bytes,bytes,uint64,bytes,bytes,uint64,bytes),bytes,uint64,uint256,address))"
      | "dispatch((bytes,bytes,bytes,uint64,uint256,address))"
      | "dispatch((bytes,uint64,bytes[],uint64,uint256))"
      | "dispatchIncoming(((bytes,bytes,uint64,bytes,bytes,uint64,bytes),bytes,uint64),address)"
      | "dispatchIncoming((bytes,bytes,uint64,bytes,bytes,uint64,bytes),address)"
      | "dispatchIncoming(((bytes,bytes,uint64,address,uint64,bytes[],uint64),(bytes,bytes)[]),address)"
      | "dispatchTimeOut((bytes,bytes,uint64,address,uint64,bytes[],uint64),(uint256,address),bytes32)"
      | "dispatchTimeOut(((bytes,bytes,uint64,bytes,bytes,uint64,bytes),bytes,uint64),(uint256,address),bytes32)"
      | "dispatchTimeOut((bytes,bytes,uint64,bytes,bytes,uint64,bytes),(uint256,address),bytes32)"
      | "feeToken"
      | "frozen"
      | "fundRequest"
      | "fundResponse"
      | "host"
      | "hyperbridge"
      | "latestStateMachineHeight"
      | "nonce"
      | "perByteFee"
      | "requestCommitments"
      | "requestReceipts"
      | "responded"
      | "responseCommitments"
      | "responseReceipts"
      | "setFrozenState"
      | "stateCommitmentFee"
      | "stateMachineCommitment"
      | "stateMachineCommitmentUpdateTime"
      | "storeConsensusState"
      | "storeStateMachineCommitment"
      | "timestamp"
      | "unStakingPeriod"
      | "uniswapV2Router"
      | "vetoes"
  ): FunctionFragment;

  encodeFunctionData(functionFragment: "admin", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "challengePeriod",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "consensusClient",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "consensusState",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "consensusUpdateTime",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "deleteStateMachineCommitment",
    values: [StateMachineHeightStruct, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "dispatch(((bytes,bytes,uint64,bytes,bytes,uint64,bytes),bytes,uint64,uint256,address))",
    values: [DispatchPostResponseStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "dispatch((bytes,bytes,bytes,uint64,uint256,address))",
    values: [DispatchPostStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "dispatch((bytes,uint64,bytes[],uint64,uint256))",
    values: [DispatchGetStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "dispatchIncoming(((bytes,bytes,uint64,bytes,bytes,uint64,bytes),bytes,uint64),address)",
    values: [PostResponseStruct, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "dispatchIncoming((bytes,bytes,uint64,bytes,bytes,uint64,bytes),address)",
    values: [PostRequestStruct, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "dispatchIncoming(((bytes,bytes,uint64,address,uint64,bytes[],uint64),(bytes,bytes)[]),address)",
    values: [GetResponseStruct, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "dispatchTimeOut((bytes,bytes,uint64,address,uint64,bytes[],uint64),(uint256,address),bytes32)",
    values: [GetRequestStruct, FeeMetadataStruct, PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "dispatchTimeOut(((bytes,bytes,uint64,bytes,bytes,uint64,bytes),bytes,uint64),(uint256,address),bytes32)",
    values: [PostResponseStruct, FeeMetadataStruct, PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "dispatchTimeOut((bytes,bytes,uint64,bytes,bytes,uint64,bytes),(uint256,address),bytes32)",
    values: [PostRequestStruct, FeeMetadataStruct, PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(functionFragment: "feeToken", values?: undefined): string;
  encodeFunctionData(functionFragment: "frozen", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "fundRequest",
    values: [PromiseOrValue<BytesLike>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "fundResponse",
    values: [PromiseOrValue<BytesLike>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(functionFragment: "host", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "hyperbridge",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "latestStateMachineHeight",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(functionFragment: "nonce", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "perByteFee",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "requestCommitments",
    values: [PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "requestReceipts",
    values: [PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "responded",
    values: [PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "responseCommitments",
    values: [PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "responseReceipts",
    values: [PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "setFrozenState",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "stateCommitmentFee",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "stateMachineCommitment",
    values: [StateMachineHeightStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "stateMachineCommitmentUpdateTime",
    values: [StateMachineHeightStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "storeConsensusState",
    values: [PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "storeStateMachineCommitment",
    values: [StateMachineHeightStruct, StateCommitmentStruct]
  ): string;
  encodeFunctionData(functionFragment: "timestamp", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "unStakingPeriod",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "uniswapV2Router",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "vetoes",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>]
  ): string;

  decodeFunctionResult(functionFragment: "admin", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "challengePeriod",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "consensusClient",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "consensusState",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "consensusUpdateTime",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "deleteStateMachineCommitment",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "dispatch(((bytes,bytes,uint64,bytes,bytes,uint64,bytes),bytes,uint64,uint256,address))",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "dispatch((bytes,bytes,bytes,uint64,uint256,address))",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "dispatch((bytes,uint64,bytes[],uint64,uint256))",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "dispatchIncoming(((bytes,bytes,uint64,bytes,bytes,uint64,bytes),bytes,uint64),address)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "dispatchIncoming((bytes,bytes,uint64,bytes,bytes,uint64,bytes),address)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "dispatchIncoming(((bytes,bytes,uint64,address,uint64,bytes[],uint64),(bytes,bytes)[]),address)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "dispatchTimeOut((bytes,bytes,uint64,address,uint64,bytes[],uint64),(uint256,address),bytes32)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "dispatchTimeOut(((bytes,bytes,uint64,bytes,bytes,uint64,bytes),bytes,uint64),(uint256,address),bytes32)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "dispatchTimeOut((bytes,bytes,uint64,bytes,bytes,uint64,bytes),(uint256,address),bytes32)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "feeToken", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "frozen", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "fundRequest",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "fundResponse",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "host", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "hyperbridge",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "latestStateMachineHeight",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "nonce", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "perByteFee", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "requestCommitments",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "requestReceipts",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "responded", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "responseCommitments",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "responseReceipts",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setFrozenState",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "stateCommitmentFee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "stateMachineCommitment",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "stateMachineCommitmentUpdateTime",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "storeConsensusState",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "storeStateMachineCommitment",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "timestamp", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "unStakingPeriod",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "uniswapV2Router",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "vetoes", data: BytesLike): Result;

  events: {};
}

export interface IIsmpHostAbi extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: IIsmpHostAbiInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    admin(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    challengePeriod(overrides?: CallOverrides): Promise<[BigNumber]>;

    consensusClient(overrides?: CallOverrides): Promise<[string]>;

    consensusState(overrides?: CallOverrides): Promise<[string]>;

    consensusUpdateTime(overrides?: CallOverrides): Promise<[BigNumber]>;

    deleteStateMachineCommitment(
      height: StateMachineHeightStruct,
      fisherman: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    "dispatch(((bytes,bytes,uint64,bytes,bytes,uint64,bytes),bytes,uint64,uint256,address))"(
      response: DispatchPostResponseStruct,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    "dispatch((bytes,bytes,bytes,uint64,uint256,address))"(
      request: DispatchPostStruct,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    "dispatch((bytes,uint64,bytes[],uint64,uint256))"(
      request: DispatchGetStruct,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    "dispatchIncoming(((bytes,bytes,uint64,bytes,bytes,uint64,bytes),bytes,uint64),address)"(
      response: PostResponseStruct,
      relayer: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    "dispatchIncoming((bytes,bytes,uint64,bytes,bytes,uint64,bytes),address)"(
      request: PostRequestStruct,
      relayer: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    "dispatchIncoming(((bytes,bytes,uint64,address,uint64,bytes[],uint64),(bytes,bytes)[]),address)"(
      response: GetResponseStruct,
      relayer: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    "dispatchTimeOut((bytes,bytes,uint64,address,uint64,bytes[],uint64),(uint256,address),bytes32)"(
      timeout: GetRequestStruct,
      meta: FeeMetadataStruct,
      commitment: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    "dispatchTimeOut(((bytes,bytes,uint64,bytes,bytes,uint64,bytes),bytes,uint64),(uint256,address),bytes32)"(
      timeout: PostResponseStruct,
      meta: FeeMetadataStruct,
      commitment: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    "dispatchTimeOut((bytes,bytes,uint64,bytes,bytes,uint64,bytes),(uint256,address),bytes32)"(
      timeout: PostRequestStruct,
      meta: FeeMetadataStruct,
      commitment: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    feeToken(overrides?: CallOverrides): Promise<[string]>;

    frozen(overrides?: CallOverrides): Promise<[number]>;

    fundRequest(
      commitment: PromiseOrValue<BytesLike>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    fundResponse(
      commitment: PromiseOrValue<BytesLike>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    host(overrides?: CallOverrides): Promise<[string]>;

    hyperbridge(overrides?: CallOverrides): Promise<[string]>;

    latestStateMachineHeight(
      stateMachineId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    nonce(overrides?: CallOverrides): Promise<[BigNumber]>;

    perByteFee(overrides?: CallOverrides): Promise<[BigNumber]>;

    requestCommitments(
      commitment: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<[FeeMetadataStructOutput]>;

    requestReceipts(
      commitment: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<[string]>;

    responded(
      commitment: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    responseCommitments(
      commitment: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<[FeeMetadataStructOutput]>;

    responseReceipts(
      commitment: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<[ResponseReceiptStructOutput]>;

    setFrozenState(
      newState: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    stateCommitmentFee(overrides?: CallOverrides): Promise<[BigNumber]>;

    stateMachineCommitment(
      height: StateMachineHeightStruct,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    stateMachineCommitmentUpdateTime(
      height: StateMachineHeightStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    storeConsensusState(
      state: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    storeStateMachineCommitment(
      height: StateMachineHeightStruct,
      commitment: StateCommitmentStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    timestamp(overrides?: CallOverrides): Promise<[BigNumber]>;

    unStakingPeriod(overrides?: CallOverrides): Promise<[BigNumber]>;

    uniswapV2Router(overrides?: CallOverrides): Promise<[string]>;

    vetoes(
      paraId: PromiseOrValue<BigNumberish>,
      height: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[string]>;
  };

  admin(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  challengePeriod(overrides?: CallOverrides): Promise<BigNumber>;

  consensusClient(overrides?: CallOverrides): Promise<string>;

  consensusState(overrides?: CallOverrides): Promise<string>;

  consensusUpdateTime(overrides?: CallOverrides): Promise<BigNumber>;

  deleteStateMachineCommitment(
    height: StateMachineHeightStruct,
    fisherman: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  "dispatch(((bytes,bytes,uint64,bytes,bytes,uint64,bytes),bytes,uint64,uint256,address))"(
    response: DispatchPostResponseStruct,
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  "dispatch((bytes,bytes,bytes,uint64,uint256,address))"(
    request: DispatchPostStruct,
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  "dispatch((bytes,uint64,bytes[],uint64,uint256))"(
    request: DispatchGetStruct,
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  "dispatchIncoming(((bytes,bytes,uint64,bytes,bytes,uint64,bytes),bytes,uint64),address)"(
    response: PostResponseStruct,
    relayer: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  "dispatchIncoming((bytes,bytes,uint64,bytes,bytes,uint64,bytes),address)"(
    request: PostRequestStruct,
    relayer: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  "dispatchIncoming(((bytes,bytes,uint64,address,uint64,bytes[],uint64),(bytes,bytes)[]),address)"(
    response: GetResponseStruct,
    relayer: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  "dispatchTimeOut((bytes,bytes,uint64,address,uint64,bytes[],uint64),(uint256,address),bytes32)"(
    timeout: GetRequestStruct,
    meta: FeeMetadataStruct,
    commitment: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  "dispatchTimeOut(((bytes,bytes,uint64,bytes,bytes,uint64,bytes),bytes,uint64),(uint256,address),bytes32)"(
    timeout: PostResponseStruct,
    meta: FeeMetadataStruct,
    commitment: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  "dispatchTimeOut((bytes,bytes,uint64,bytes,bytes,uint64,bytes),(uint256,address),bytes32)"(
    timeout: PostRequestStruct,
    meta: FeeMetadataStruct,
    commitment: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  feeToken(overrides?: CallOverrides): Promise<string>;

  frozen(overrides?: CallOverrides): Promise<number>;

  fundRequest(
    commitment: PromiseOrValue<BytesLike>,
    amount: PromiseOrValue<BigNumberish>,
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  fundResponse(
    commitment: PromiseOrValue<BytesLike>,
    amount: PromiseOrValue<BigNumberish>,
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  host(overrides?: CallOverrides): Promise<string>;

  hyperbridge(overrides?: CallOverrides): Promise<string>;

  latestStateMachineHeight(
    stateMachineId: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  nonce(overrides?: CallOverrides): Promise<BigNumber>;

  perByteFee(overrides?: CallOverrides): Promise<BigNumber>;

  requestCommitments(
    commitment: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<FeeMetadataStructOutput>;

  requestReceipts(
    commitment: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<string>;

  responded(
    commitment: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  responseCommitments(
    commitment: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<FeeMetadataStructOutput>;

  responseReceipts(
    commitment: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<ResponseReceiptStructOutput>;

  setFrozenState(
    newState: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  stateCommitmentFee(overrides?: CallOverrides): Promise<BigNumber>;

  stateMachineCommitment(
    height: StateMachineHeightStruct,
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  stateMachineCommitmentUpdateTime(
    height: StateMachineHeightStruct,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  storeConsensusState(
    state: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  storeStateMachineCommitment(
    height: StateMachineHeightStruct,
    commitment: StateCommitmentStruct,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  timestamp(overrides?: CallOverrides): Promise<BigNumber>;

  unStakingPeriod(overrides?: CallOverrides): Promise<BigNumber>;

  uniswapV2Router(overrides?: CallOverrides): Promise<string>;

  vetoes(
    paraId: PromiseOrValue<BigNumberish>,
    height: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<string>;

  callStatic: {
    admin(overrides?: CallOverrides): Promise<string>;

    challengePeriod(overrides?: CallOverrides): Promise<BigNumber>;

    consensusClient(overrides?: CallOverrides): Promise<string>;

    consensusState(overrides?: CallOverrides): Promise<string>;

    consensusUpdateTime(overrides?: CallOverrides): Promise<BigNumber>;

    deleteStateMachineCommitment(
      height: StateMachineHeightStruct,
      fisherman: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    "dispatch(((bytes,bytes,uint64,bytes,bytes,uint64,bytes),bytes,uint64,uint256,address))"(
      response: DispatchPostResponseStruct,
      overrides?: CallOverrides
    ): Promise<string>;

    "dispatch((bytes,bytes,bytes,uint64,uint256,address))"(
      request: DispatchPostStruct,
      overrides?: CallOverrides
    ): Promise<string>;

    "dispatch((bytes,uint64,bytes[],uint64,uint256))"(
      request: DispatchGetStruct,
      overrides?: CallOverrides
    ): Promise<string>;

    "dispatchIncoming(((bytes,bytes,uint64,bytes,bytes,uint64,bytes),bytes,uint64),address)"(
      response: PostResponseStruct,
      relayer: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    "dispatchIncoming((bytes,bytes,uint64,bytes,bytes,uint64,bytes),address)"(
      request: PostRequestStruct,
      relayer: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    "dispatchIncoming(((bytes,bytes,uint64,address,uint64,bytes[],uint64),(bytes,bytes)[]),address)"(
      response: GetResponseStruct,
      relayer: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    "dispatchTimeOut((bytes,bytes,uint64,address,uint64,bytes[],uint64),(uint256,address),bytes32)"(
      timeout: GetRequestStruct,
      meta: FeeMetadataStruct,
      commitment: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<void>;

    "dispatchTimeOut(((bytes,bytes,uint64,bytes,bytes,uint64,bytes),bytes,uint64),(uint256,address),bytes32)"(
      timeout: PostResponseStruct,
      meta: FeeMetadataStruct,
      commitment: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<void>;

    "dispatchTimeOut((bytes,bytes,uint64,bytes,bytes,uint64,bytes),(uint256,address),bytes32)"(
      timeout: PostRequestStruct,
      meta: FeeMetadataStruct,
      commitment: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<void>;

    feeToken(overrides?: CallOverrides): Promise<string>;

    frozen(overrides?: CallOverrides): Promise<number>;

    fundRequest(
      commitment: PromiseOrValue<BytesLike>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    fundResponse(
      commitment: PromiseOrValue<BytesLike>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    host(overrides?: CallOverrides): Promise<string>;

    hyperbridge(overrides?: CallOverrides): Promise<string>;

    latestStateMachineHeight(
      stateMachineId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    nonce(overrides?: CallOverrides): Promise<BigNumber>;

    perByteFee(overrides?: CallOverrides): Promise<BigNumber>;

    requestCommitments(
      commitment: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<FeeMetadataStructOutput>;

    requestReceipts(
      commitment: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<string>;

    responded(
      commitment: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    responseCommitments(
      commitment: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<FeeMetadataStructOutput>;

    responseReceipts(
      commitment: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<ResponseReceiptStructOutput>;

    setFrozenState(
      newState: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    stateCommitmentFee(overrides?: CallOverrides): Promise<BigNumber>;

    stateMachineCommitment(
      height: StateMachineHeightStruct,
      overrides?: CallOverrides
    ): Promise<StateCommitmentStructOutput>;

    stateMachineCommitmentUpdateTime(
      height: StateMachineHeightStruct,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    storeConsensusState(
      state: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<void>;

    storeStateMachineCommitment(
      height: StateMachineHeightStruct,
      commitment: StateCommitmentStruct,
      overrides?: CallOverrides
    ): Promise<void>;

    timestamp(overrides?: CallOverrides): Promise<BigNumber>;

    unStakingPeriod(overrides?: CallOverrides): Promise<BigNumber>;

    uniswapV2Router(overrides?: CallOverrides): Promise<string>;

    vetoes(
      paraId: PromiseOrValue<BigNumberish>,
      height: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<string>;
  };

  filters: {};

  estimateGas: {
    admin(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    challengePeriod(overrides?: CallOverrides): Promise<BigNumber>;

    consensusClient(overrides?: CallOverrides): Promise<BigNumber>;

    consensusState(overrides?: CallOverrides): Promise<BigNumber>;

    consensusUpdateTime(overrides?: CallOverrides): Promise<BigNumber>;

    deleteStateMachineCommitment(
      height: StateMachineHeightStruct,
      fisherman: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    "dispatch(((bytes,bytes,uint64,bytes,bytes,uint64,bytes),bytes,uint64,uint256,address))"(
      response: DispatchPostResponseStruct,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    "dispatch((bytes,bytes,bytes,uint64,uint256,address))"(
      request: DispatchPostStruct,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    "dispatch((bytes,uint64,bytes[],uint64,uint256))"(
      request: DispatchGetStruct,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    "dispatchIncoming(((bytes,bytes,uint64,bytes,bytes,uint64,bytes),bytes,uint64),address)"(
      response: PostResponseStruct,
      relayer: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    "dispatchIncoming((bytes,bytes,uint64,bytes,bytes,uint64,bytes),address)"(
      request: PostRequestStruct,
      relayer: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    "dispatchIncoming(((bytes,bytes,uint64,address,uint64,bytes[],uint64),(bytes,bytes)[]),address)"(
      response: GetResponseStruct,
      relayer: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    "dispatchTimeOut((bytes,bytes,uint64,address,uint64,bytes[],uint64),(uint256,address),bytes32)"(
      timeout: GetRequestStruct,
      meta: FeeMetadataStruct,
      commitment: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    "dispatchTimeOut(((bytes,bytes,uint64,bytes,bytes,uint64,bytes),bytes,uint64),(uint256,address),bytes32)"(
      timeout: PostResponseStruct,
      meta: FeeMetadataStruct,
      commitment: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    "dispatchTimeOut((bytes,bytes,uint64,bytes,bytes,uint64,bytes),(uint256,address),bytes32)"(
      timeout: PostRequestStruct,
      meta: FeeMetadataStruct,
      commitment: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    feeToken(overrides?: CallOverrides): Promise<BigNumber>;

    frozen(overrides?: CallOverrides): Promise<BigNumber>;

    fundRequest(
      commitment: PromiseOrValue<BytesLike>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    fundResponse(
      commitment: PromiseOrValue<BytesLike>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    host(overrides?: CallOverrides): Promise<BigNumber>;

    hyperbridge(overrides?: CallOverrides): Promise<BigNumber>;

    latestStateMachineHeight(
      stateMachineId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    nonce(overrides?: CallOverrides): Promise<BigNumber>;

    perByteFee(overrides?: CallOverrides): Promise<BigNumber>;

    requestCommitments(
      commitment: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    requestReceipts(
      commitment: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    responded(
      commitment: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    responseCommitments(
      commitment: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    responseReceipts(
      commitment: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    setFrozenState(
      newState: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    stateCommitmentFee(overrides?: CallOverrides): Promise<BigNumber>;

    stateMachineCommitment(
      height: StateMachineHeightStruct,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    stateMachineCommitmentUpdateTime(
      height: StateMachineHeightStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    storeConsensusState(
      state: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    storeStateMachineCommitment(
      height: StateMachineHeightStruct,
      commitment: StateCommitmentStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    timestamp(overrides?: CallOverrides): Promise<BigNumber>;

    unStakingPeriod(overrides?: CallOverrides): Promise<BigNumber>;

    uniswapV2Router(overrides?: CallOverrides): Promise<BigNumber>;

    vetoes(
      paraId: PromiseOrValue<BigNumberish>,
      height: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    admin(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    challengePeriod(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    consensusClient(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    consensusState(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    consensusUpdateTime(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    deleteStateMachineCommitment(
      height: StateMachineHeightStruct,
      fisherman: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    "dispatch(((bytes,bytes,uint64,bytes,bytes,uint64,bytes),bytes,uint64,uint256,address))"(
      response: DispatchPostResponseStruct,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    "dispatch((bytes,bytes,bytes,uint64,uint256,address))"(
      request: DispatchPostStruct,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    "dispatch((bytes,uint64,bytes[],uint64,uint256))"(
      request: DispatchGetStruct,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    "dispatchIncoming(((bytes,bytes,uint64,bytes,bytes,uint64,bytes),bytes,uint64),address)"(
      response: PostResponseStruct,
      relayer: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    "dispatchIncoming((bytes,bytes,uint64,bytes,bytes,uint64,bytes),address)"(
      request: PostRequestStruct,
      relayer: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    "dispatchIncoming(((bytes,bytes,uint64,address,uint64,bytes[],uint64),(bytes,bytes)[]),address)"(
      response: GetResponseStruct,
      relayer: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    "dispatchTimeOut((bytes,bytes,uint64,address,uint64,bytes[],uint64),(uint256,address),bytes32)"(
      timeout: GetRequestStruct,
      meta: FeeMetadataStruct,
      commitment: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    "dispatchTimeOut(((bytes,bytes,uint64,bytes,bytes,uint64,bytes),bytes,uint64),(uint256,address),bytes32)"(
      timeout: PostResponseStruct,
      meta: FeeMetadataStruct,
      commitment: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    "dispatchTimeOut((bytes,bytes,uint64,bytes,bytes,uint64,bytes),(uint256,address),bytes32)"(
      timeout: PostRequestStruct,
      meta: FeeMetadataStruct,
      commitment: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    feeToken(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    frozen(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    fundRequest(
      commitment: PromiseOrValue<BytesLike>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    fundResponse(
      commitment: PromiseOrValue<BytesLike>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    host(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    hyperbridge(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    latestStateMachineHeight(
      stateMachineId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    nonce(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    perByteFee(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    requestCommitments(
      commitment: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    requestReceipts(
      commitment: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    responded(
      commitment: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    responseCommitments(
      commitment: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    responseReceipts(
      commitment: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    setFrozenState(
      newState: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    stateCommitmentFee(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    stateMachineCommitment(
      height: StateMachineHeightStruct,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    stateMachineCommitmentUpdateTime(
      height: StateMachineHeightStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    storeConsensusState(
      state: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    storeStateMachineCommitment(
      height: StateMachineHeightStruct,
      commitment: StateCommitmentStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    timestamp(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    unStakingPeriod(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    uniswapV2Router(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    vetoes(
      paraId: PromiseOrValue<BigNumberish>,
      height: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
