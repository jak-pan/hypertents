/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { Contract, Signer, utils } from "ethers";
import type { Provider } from "@ethersproject/providers";
import type {
  IDispatcherAbi,
  IDispatcherAbiInterface,
} from "../../IDispatcher.sol/IDispatcherAbi";

const _abi = [
  {
    type: "function",
    name: "dispatch",
    inputs: [
      {
        name: "response",
        type: "tuple",
        internalType: "struct DispatchPostResponse",
        components: [
          {
            name: "request",
            type: "tuple",
            internalType: "struct PostRequest",
            components: [
              {
                name: "source",
                type: "bytes",
                internalType: "bytes",
              },
              {
                name: "dest",
                type: "bytes",
                internalType: "bytes",
              },
              {
                name: "nonce",
                type: "uint64",
                internalType: "uint64",
              },
              {
                name: "from",
                type: "bytes",
                internalType: "bytes",
              },
              {
                name: "to",
                type: "bytes",
                internalType: "bytes",
              },
              {
                name: "timeoutTimestamp",
                type: "uint64",
                internalType: "uint64",
              },
              {
                name: "body",
                type: "bytes",
                internalType: "bytes",
              },
            ],
          },
          {
            name: "response",
            type: "bytes",
            internalType: "bytes",
          },
          {
            name: "timeout",
            type: "uint64",
            internalType: "uint64",
          },
          {
            name: "fee",
            type: "uint256",
            internalType: "uint256",
          },
          {
            name: "payer",
            type: "address",
            internalType: "address",
          },
        ],
      },
    ],
    outputs: [
      {
        name: "commitment",
        type: "bytes32",
        internalType: "bytes32",
      },
    ],
    stateMutability: "payable",
  },
  {
    type: "function",
    name: "dispatch",
    inputs: [
      {
        name: "request",
        type: "tuple",
        internalType: "struct DispatchPost",
        components: [
          {
            name: "dest",
            type: "bytes",
            internalType: "bytes",
          },
          {
            name: "to",
            type: "bytes",
            internalType: "bytes",
          },
          {
            name: "body",
            type: "bytes",
            internalType: "bytes",
          },
          {
            name: "timeout",
            type: "uint64",
            internalType: "uint64",
          },
          {
            name: "fee",
            type: "uint256",
            internalType: "uint256",
          },
          {
            name: "payer",
            type: "address",
            internalType: "address",
          },
        ],
      },
    ],
    outputs: [
      {
        name: "commitment",
        type: "bytes32",
        internalType: "bytes32",
      },
    ],
    stateMutability: "payable",
  },
  {
    type: "function",
    name: "dispatch",
    inputs: [
      {
        name: "request",
        type: "tuple",
        internalType: "struct DispatchGet",
        components: [
          {
            name: "dest",
            type: "bytes",
            internalType: "bytes",
          },
          {
            name: "height",
            type: "uint64",
            internalType: "uint64",
          },
          {
            name: "keys",
            type: "bytes[]",
            internalType: "bytes[]",
          },
          {
            name: "timeout",
            type: "uint64",
            internalType: "uint64",
          },
          {
            name: "fee",
            type: "uint256",
            internalType: "uint256",
          },
        ],
      },
    ],
    outputs: [
      {
        name: "commitment",
        type: "bytes32",
        internalType: "bytes32",
      },
    ],
    stateMutability: "payable",
  },
  {
    type: "function",
    name: "fundRequest",
    inputs: [
      {
        name: "commitment",
        type: "bytes32",
        internalType: "bytes32",
      },
      {
        name: "amount",
        type: "uint256",
        internalType: "uint256",
      },
    ],
    outputs: [],
    stateMutability: "payable",
  },
  {
    type: "function",
    name: "fundResponse",
    inputs: [
      {
        name: "commitment",
        type: "bytes32",
        internalType: "bytes32",
      },
      {
        name: "amount",
        type: "uint256",
        internalType: "uint256",
      },
    ],
    outputs: [],
    stateMutability: "payable",
  },
] as const;

export class IDispatcherAbi__factory {
  static readonly abi = _abi;
  static createInterface(): IDispatcherAbiInterface {
    return new utils.Interface(_abi) as IDispatcherAbiInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): IDispatcherAbi {
    return new Contract(address, _abi, signerOrProvider) as IDispatcherAbi;
  }
}
