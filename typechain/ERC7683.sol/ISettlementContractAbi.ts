/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type { FunctionFragment, Result } from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../common";

export type CrossChainOrderStruct = {
  settlementContract: PromiseOrValue<string>;
  swapper: PromiseOrValue<string>;
  nonce: PromiseOrValue<BigNumberish>;
  originChainId: PromiseOrValue<BigNumberish>;
  initiateDeadline: PromiseOrValue<BigNumberish>;
  fillDeadline: PromiseOrValue<BigNumberish>;
  orderData: PromiseOrValue<BytesLike>;
};

export type CrossChainOrderStructOutput = [
  string,
  string,
  BigNumber,
  number,
  number,
  number,
  string
] & {
  settlementContract: string;
  swapper: string;
  nonce: BigNumber;
  originChainId: number;
  initiateDeadline: number;
  fillDeadline: number;
  orderData: string;
};

export type InputStruct = {
  token: PromiseOrValue<string>;
  amount: PromiseOrValue<BigNumberish>;
};

export type InputStructOutput = [string, BigNumber] & {
  token: string;
  amount: BigNumber;
};

export type OutputStruct = {
  token: PromiseOrValue<string>;
  amount: PromiseOrValue<BigNumberish>;
  recipient: PromiseOrValue<string>;
  chainId: PromiseOrValue<BigNumberish>;
};

export type OutputStructOutput = [string, BigNumber, string, number] & {
  token: string;
  amount: BigNumber;
  recipient: string;
  chainId: number;
};

export type ResolvedCrossChainOrderStruct = {
  settlementContract: PromiseOrValue<string>;
  swapper: PromiseOrValue<string>;
  nonce: PromiseOrValue<BigNumberish>;
  originChainId: PromiseOrValue<BigNumberish>;
  initiateDeadline: PromiseOrValue<BigNumberish>;
  fillDeadline: PromiseOrValue<BigNumberish>;
  swapperInputs: InputStruct[];
  swapperOutputs: OutputStruct[];
  fillerOutputs: OutputStruct[];
};

export type ResolvedCrossChainOrderStructOutput = [
  string,
  string,
  BigNumber,
  number,
  number,
  number,
  InputStructOutput[],
  OutputStructOutput[],
  OutputStructOutput[]
] & {
  settlementContract: string;
  swapper: string;
  nonce: BigNumber;
  originChainId: number;
  initiateDeadline: number;
  fillDeadline: number;
  swapperInputs: InputStructOutput[];
  swapperOutputs: OutputStructOutput[];
  fillerOutputs: OutputStructOutput[];
};

export interface ISettlementContractAbiInterface extends utils.Interface {
  functions: {
    "initiate((address,address,uint256,uint32,uint32,uint32,bytes),bytes,bytes)": FunctionFragment;
    "resolve((address,address,uint256,uint32,uint32,uint32,bytes),bytes)": FunctionFragment;
  };

  getFunction(nameOrSignatureOrTopic: "initiate" | "resolve"): FunctionFragment;

  encodeFunctionData(
    functionFragment: "initiate",
    values: [
      CrossChainOrderStruct,
      PromiseOrValue<BytesLike>,
      PromiseOrValue<BytesLike>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "resolve",
    values: [CrossChainOrderStruct, PromiseOrValue<BytesLike>]
  ): string;

  decodeFunctionResult(functionFragment: "initiate", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "resolve", data: BytesLike): Result;

  events: {};
}

export interface ISettlementContractAbi extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: ISettlementContractAbiInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    initiate(
      order: CrossChainOrderStruct,
      signature: PromiseOrValue<BytesLike>,
      fillerData: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    resolve(
      order: CrossChainOrderStruct,
      fillerData: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<[ResolvedCrossChainOrderStructOutput]>;
  };

  initiate(
    order: CrossChainOrderStruct,
    signature: PromiseOrValue<BytesLike>,
    fillerData: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  resolve(
    order: CrossChainOrderStruct,
    fillerData: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<ResolvedCrossChainOrderStructOutput>;

  callStatic: {
    initiate(
      order: CrossChainOrderStruct,
      signature: PromiseOrValue<BytesLike>,
      fillerData: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<void>;

    resolve(
      order: CrossChainOrderStruct,
      fillerData: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<ResolvedCrossChainOrderStructOutput>;
  };

  filters: {};

  estimateGas: {
    initiate(
      order: CrossChainOrderStruct,
      signature: PromiseOrValue<BytesLike>,
      fillerData: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    resolve(
      order: CrossChainOrderStruct,
      fillerData: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    initiate(
      order: CrossChainOrderStruct,
      signature: PromiseOrValue<BytesLike>,
      fillerData: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    resolve(
      order: CrossChainOrderStruct,
      fillerData: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
